import jsonfrom .action import InsertAction, IEAction, TIEAction, IAEActionfrom ..base import PersonaBase, EmojiPersona, AudioPersona, TextPersona, action_processfrom ..tools import add_paraclass WaitPersona(PersonaBase):    """    used a new func to process action to wait    """    __wait_time = {        "bench": 50,        "clerk table": 60,        "plaintiff table": 70,        "defense table": 70,    }        def __init__(self, **kwargs):        self.area = kwargs.get("area")        super().__init__(**kwargs)        @property    def wait_time(self):        if self.area in WaitPersona.__wait_time:            return self.__wait_time[self.area]        return 0        @action_process("WaitPersona")    def add_wait_time(self):        inserted_action = [self.action_class("face_down_stay1", {"second": self.wait_time})]        inserted_action.extend(self.action)        self.action = inserted_actionclass InsertPersona(PersonaBase):    insert_file_map = {}        def __init__(self, profession: str, name: str, **kwargs):        kwargs.setdefault("action_class", InsertAction)        self.profession = profession        self.name = name        super().__init__(**kwargs)        @action_process("InsertPersona")    def insert_talk(self):        inserted_action = []        for a in self.action:            a: InsertAction            if a.legal_operation():                inserted_action.append(a)            elif a.operation.startswith("insert"):                prefix: str = a.insert_action_prefix                with open(self.insert_file_map[a.stage], "r") as f:                    action_animation: dict = json.load(f)                for suffix, config in action_animation.items():                    config["second"] = 10                    if config["role"] != self.profession:                        if config["role"] in self.profession:                            # config.pop("text")                            # config.pop("emoji")                            print(self.profession)                        else:                            config.pop("text")                            config.pop("emoji")                        ## TODO: 以RECT结尾的职业不要添加时间                        # 1.现在是不等于，所以pop了，有两种情况，一种是in，一种是not in                    add_para(config, self.background, self.foreground)                    inserted_action.append(self.action_class(prefix, config))            else:                print(f"IWAEPersona has no legal operation in {a}")                self.action = inserted_actionclass IWAEPersona(InsertPersona, EmojiPersona, AudioPersona, WaitPersona):    def __init__(self, **kwargs):        kwargs.setdefault("action_class", IAEAction)        super().__init__(**kwargs)class EIPersona(EmojiPersona, InsertPersona):    def __init__(self, **kwargs):        kwargs.setdefault("action_class", IEAction)        super().__init__(**kwargs)class EITPersona(InsertPersona, TextPersona):    __small_rect = "examples/classroom/assets/image/background/text/rect_small.png"        def __init__(self, **kwargs):        kwargs.setdefault("action_class", TIEAction)                persona_config: dict = kwargs.get("persona_config")        with open(persona_config.get("json_file"), "r") as f:            original_persona_config: dict = json.load(f)                original_persona_config["x"] = persona_config["x"]        original_persona_config["y"] = persona_config["y"]        original_persona_config["name"] = kwargs["name"]        original_persona_config["screen"] = kwargs["screen"]        original_persona_config["action_class"] = TIEAction        original_persona_config["profession"] += kwargs["profession"]        original_persona_config["background"] = kwargs.get("background", None)        original_persona_config["foreground"] = kwargs.get("foreground", None)                super().__init__(**original_persona_config)        @action_process("EITPersona")    def text_action_process(self):        for a in self.action:            if a.legal_operation():                a.operation = "face_down"            else:                print(f"IWAEPersona has no legal operation in {a}")        @action_process("EITPersona")    def add_rect_background(self):        for a in self.action:            a: TIEAction            if a.text is not None:                a.add_persona_background((-1, -1), self.__small_rect)